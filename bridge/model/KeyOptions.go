// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KeyOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsKeyOptions(buf []byte, offset flatbuffers.UOffsetT) *KeyOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KeyOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KeyOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KeyOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KeyOptions) Hash() Hash {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Hash(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *KeyOptions) MutateHash(n Hash) bool {
	return rcv._tab.MutateInt32Slot(4, int32(n))
}

func (rcv *KeyOptions) Cipher() Cipher {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Cipher(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *KeyOptions) MutateCipher(n Cipher) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *KeyOptions) Compression() Compression {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Compression(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *KeyOptions) MutateCompression(n Compression) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *KeyOptions) CompressionLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KeyOptions) MutateCompressionLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *KeyOptions) RsaBits() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KeyOptions) MutateRsaBits(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func KeyOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KeyOptionsAddHash(builder *flatbuffers.Builder, hash Hash) {
	builder.PrependInt32Slot(0, int32(hash), 0)
}
func KeyOptionsAddCipher(builder *flatbuffers.Builder, cipher Cipher) {
	builder.PrependInt32Slot(1, int32(cipher), 0)
}
func KeyOptionsAddCompression(builder *flatbuffers.Builder, compression Compression) {
	builder.PrependInt32Slot(2, int32(compression), 0)
}
func KeyOptionsAddCompressionLevel(builder *flatbuffers.Builder, compressionLevel int32) {
	builder.PrependInt32Slot(3, compressionLevel, 0)
}
func KeyOptionsAddRsaBits(builder *flatbuffers.Builder, rsaBits int32) {
	builder.PrependInt32Slot(4, rsaBits, 0)
}
func KeyOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
