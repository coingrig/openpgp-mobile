namespace model;

enum Hash : int {
  SHA256 = 0,
  SHA224 = 1,
  SHA384 = 2,
  SHA512 = 3,
}

enum Compression : int {
  NONE = 0,
  ZLIB = 1,
  ZIP = 2,
}

enum Cipher : int {
  AES128 = 0,
  AES192 = 1,
  AES256 = 2,
}

table EncryptRequest {
  message:string;
  publicKey:string;
  options:model.KeyOptions;
  signed:model.Entity;
  fileHints:model.FileHints;
}

table EncryptBytesRequest {
  message:[ubyte];
  publicKey:string;
  options:model.KeyOptions;
  signed:model.Entity;
  fileHints:model.FileHints;
}

table DecryptRequest {
  message:string;
  privateKey:string;
  passphrase:string;
  options:model.KeyOptions;
}

table DecryptBytesRequest {
  message:[ubyte];
  privateKey:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignRequest {
  message:string;
  publicKey:string;
  privateKey:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignBytesRequest {
  message:[ubyte];
  publicKey:string;
  privateKey:string;
  passphrase:string;
  options:model.KeyOptions;
}

table VerifyRequest {
  signature:string;
  message:string;
  publicKey:string;
}

table VerifyBytesRequest {
  signature:string;
  message:[ubyte];
  publicKey:string;
}

table EncryptSymmetricRequest {
  message:string;
  passphrase:string;
  options:model.KeyOptions;
  fileHints:model.FileHints;
}

table EncryptSymmetricBytesRequest {
  message:[ubyte];
  passphrase:string;
  options:model.KeyOptions;
  fileHints:model.FileHints;
}

table DecryptSymmetricRequest {
  message:string;
  passphrase:string;
  options:model.KeyOptions;
}

table DecryptSymmetricBytesRequest {
  message:[ubyte];
  passphrase:string;
  options:model.KeyOptions;
}

table GenerateRequest {
  options:model.Options;
}

table KeyOptions {
  hash:model.Hash;
  cipher:model.Cipher;
  compression:model.Compression;
  compressionLevel:int;
  rsaBits:int;
}

table Options {
  name:string;
  comment:string;
  email:string;
  passphrase:string;
  keyOptions:model.KeyOptions;
}

table FileHints {
  isBinary:bool;
  fileName:string;
  modTime:string;
}

table Entity {
  publicKey:string;
  privateKey:string;
  passphrase:string;
}

table StringResponse {
  output:string;
  error:string;
}

table BytesResponse {
  output:[ubyte];
  error:string;
}

table BoolResponse {
  output:bool;
  error:string;
}

table KeyPairResponse {
  output:model.KeyPair;
  error:string;
}

table KeyPair {
  publicKey:string;
  privateKey:string;
}

table PublicKeyMetadata {
  keyID:string;
  keyIDShort:string;
  creationTime:string;
  fingerprint:string;
  keyIDNumeric:string;
  isSubKey:bool;
}

table PrivateKeyMetadata {
  keyID:string;
  keyIDShort:string;
  creationTime:string;
  fingerprint:string;
  keyIDNumeric:string;
  isSubKey:bool;
  encrypted:bool;
}

