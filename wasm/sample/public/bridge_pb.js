'use strict'; // code generated by pbf v3.2.1

var Hash = self.Hash = {
    "HASH_UNSPECIFIED": {
        "value": 0,
        "options": {}
    },
    "HASH_SHA256": {
        "value": 1,
        "options": {}
    },
    "HASH_SHA224": {
        "value": 2,
        "options": {}
    },
    "HASH_SHA384": {
        "value": 3,
        "options": {}
    },
    "HASH_SHA512": {
        "value": 4,
        "options": {}
    }
};

var Compression = self.Compression = {
    "COMPRESSION_UNSPECIFIED": {
        "value": 0,
        "options": {}
    },
    "COMPRESSION_NONE": {
        "value": 1,
        "options": {}
    },
    "COMPRESSION_ZLIB": {
        "value": 2,
        "options": {}
    },
    "COMPRESSION_ZIP": {
        "value": 3,
        "options": {}
    }
};

var Cipher = self.Cipher = {
    "CIPHER_UNSPECIFIED": {
        "value": 0,
        "options": {}
    },
    "CIPHER_AES128": {
        "value": 1,
        "options": {}
    },
    "CIPHER_AES192": {
        "value": 2,
        "options": {}
    },
    "CIPHER_AES256": {
        "value": 3,
        "options": {}
    }
};

// EncryptRequest ========================================

var EncryptRequest = self.EncryptRequest = {};

EncryptRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptRequest._readField, {message: "", publicKey: "", options: null, signed: null, fileHints: null}, end);
};
EncryptRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.publicKey = pbf.readString();
    else if (tag === 5) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.signed = Entity.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.fileHints = FileHints.read(pbf, pbf.readVarint() + pbf.pos);
};
EncryptRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.publicKey) pbf.writeStringField(3, obj.publicKey);
    if (obj.options) pbf.writeMessage(5, KeyOptions.write, obj.options);
    if (obj.signed) pbf.writeMessage(7, Entity.write, obj.signed);
    if (obj.fileHints) pbf.writeMessage(9, FileHints.write, obj.fileHints);
};

// EncryptBytesRequest ========================================

var EncryptBytesRequest = self.EncryptBytesRequest = {};

EncryptBytesRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptBytesRequest._readField, {message: null, publicKey: "", options: null, signed: null, fileHints: null}, end);
};
EncryptBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.publicKey = pbf.readString();
    else if (tag === 5) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.signed = Entity.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.fileHints = FileHints.read(pbf, pbf.readVarint() + pbf.pos);
};
EncryptBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.publicKey) pbf.writeStringField(3, obj.publicKey);
    if (obj.options) pbf.writeMessage(5, KeyOptions.write, obj.options);
    if (obj.signed) pbf.writeMessage(7, Entity.write, obj.signed);
    if (obj.fileHints) pbf.writeMessage(9, FileHints.write, obj.fileHints);
};

// DecryptRequest ========================================

var DecryptRequest = self.DecryptRequest = {};

DecryptRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptRequest._readField, {message: "", privateKey: "", passphrase: "", options: null}, end);
};
DecryptRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.privateKey = pbf.readString();
    else if (tag === 5) obj.passphrase = pbf.readString();
    else if (tag === 7) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DecryptRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.privateKey) pbf.writeStringField(3, obj.privateKey);
    if (obj.passphrase) pbf.writeStringField(5, obj.passphrase);
    if (obj.options) pbf.writeMessage(7, KeyOptions.write, obj.options);
};

// DecryptBytesRequest ========================================

var DecryptBytesRequest = self.DecryptBytesRequest = {};

DecryptBytesRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptBytesRequest._readField, {message: null, privateKey: "", passphrase: "", options: null}, end);
};
DecryptBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.privateKey = pbf.readString();
    else if (tag === 5) obj.passphrase = pbf.readString();
    else if (tag === 7) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DecryptBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.privateKey) pbf.writeStringField(3, obj.privateKey);
    if (obj.passphrase) pbf.writeStringField(5, obj.passphrase);
    if (obj.options) pbf.writeMessage(7, KeyOptions.write, obj.options);
};

// SignRequest ========================================

var SignRequest = self.SignRequest = {};

SignRequest.read = function (pbf, end) {
    return pbf.readFields(SignRequest._readField, {message: "", publicKey: "", privateKey: "", passphrase: "", options: null}, end);
};
SignRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.publicKey = pbf.readString();
    else if (tag === 5) obj.privateKey = pbf.readString();
    else if (tag === 7) obj.passphrase = pbf.readString();
    else if (tag === 9) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
SignRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.publicKey) pbf.writeStringField(3, obj.publicKey);
    if (obj.privateKey) pbf.writeStringField(5, obj.privateKey);
    if (obj.passphrase) pbf.writeStringField(7, obj.passphrase);
    if (obj.options) pbf.writeMessage(9, KeyOptions.write, obj.options);
};

// SignBytesRequest ========================================

var SignBytesRequest = self.SignBytesRequest = {};

SignBytesRequest.read = function (pbf, end) {
    return pbf.readFields(SignBytesRequest._readField, {message: null, publicKey: "", privateKey: "", passphrase: "", options: null}, end);
};
SignBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.publicKey = pbf.readString();
    else if (tag === 5) obj.privateKey = pbf.readString();
    else if (tag === 7) obj.passphrase = pbf.readString();
    else if (tag === 9) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
SignBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.publicKey) pbf.writeStringField(3, obj.publicKey);
    if (obj.privateKey) pbf.writeStringField(5, obj.privateKey);
    if (obj.passphrase) pbf.writeStringField(7, obj.passphrase);
    if (obj.options) pbf.writeMessage(9, KeyOptions.write, obj.options);
};

// VerifyRequest ========================================

var VerifyRequest = self.VerifyRequest = {};

VerifyRequest.read = function (pbf, end) {
    return pbf.readFields(VerifyRequest._readField, {signature: "", message: "", publicKey: ""}, end);
};
VerifyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.signature = pbf.readString();
    else if (tag === 3) obj.message = pbf.readString();
    else if (tag === 5) obj.publicKey = pbf.readString();
};
VerifyRequest.write = function (obj, pbf) {
    if (obj.signature) pbf.writeStringField(1, obj.signature);
    if (obj.message) pbf.writeStringField(3, obj.message);
    if (obj.publicKey) pbf.writeStringField(5, obj.publicKey);
};

// VerifyBytesRequest ========================================

var VerifyBytesRequest = self.VerifyBytesRequest = {};

VerifyBytesRequest.read = function (pbf, end) {
    return pbf.readFields(VerifyBytesRequest._readField, {signature: "", message: null, publicKey: ""}, end);
};
VerifyBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.signature = pbf.readString();
    else if (tag === 3) obj.message = pbf.readBytes();
    else if (tag === 5) obj.publicKey = pbf.readString();
};
VerifyBytesRequest.write = function (obj, pbf) {
    if (obj.signature) pbf.writeStringField(1, obj.signature);
    if (obj.message) pbf.writeBytesField(3, obj.message);
    if (obj.publicKey) pbf.writeStringField(5, obj.publicKey);
};

// EncryptSymmetricRequest ========================================

var EncryptSymmetricRequest = self.EncryptSymmetricRequest = {};

EncryptSymmetricRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptSymmetricRequest._readField, {message: "", passphrase: "", options: null, fileHints: null}, end);
};
EncryptSymmetricRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.passphrase = pbf.readString();
    else if (tag === 5) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.fileHints = FileHints.read(pbf, pbf.readVarint() + pbf.pos);
};
EncryptSymmetricRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.passphrase) pbf.writeStringField(3, obj.passphrase);
    if (obj.options) pbf.writeMessage(5, KeyOptions.write, obj.options);
    if (obj.fileHints) pbf.writeMessage(7, FileHints.write, obj.fileHints);
};

// EncryptSymmetricBytesRequest ========================================

var EncryptSymmetricBytesRequest = self.EncryptSymmetricBytesRequest = {};

EncryptSymmetricBytesRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptSymmetricBytesRequest._readField, {message: null, passphrase: "", options: null, fileHints: null}, end);
};
EncryptSymmetricBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.passphrase = pbf.readString();
    else if (tag === 5) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.fileHints = FileHints.read(pbf, pbf.readVarint() + pbf.pos);
};
EncryptSymmetricBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.passphrase) pbf.writeStringField(3, obj.passphrase);
    if (obj.options) pbf.writeMessage(5, KeyOptions.write, obj.options);
    if (obj.fileHints) pbf.writeMessage(7, FileHints.write, obj.fileHints);
};

// DecryptSymmetricRequest ========================================

var DecryptSymmetricRequest = self.DecryptSymmetricRequest = {};

DecryptSymmetricRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptSymmetricRequest._readField, {message: "", passphrase: "", options: null}, end);
};
DecryptSymmetricRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.passphrase = pbf.readString();
    else if (tag === 5) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DecryptSymmetricRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.passphrase) pbf.writeStringField(3, obj.passphrase);
    if (obj.options) pbf.writeMessage(5, KeyOptions.write, obj.options);
};

// DecryptSymmetricBytesRequest ========================================

var DecryptSymmetricBytesRequest = self.DecryptSymmetricBytesRequest = {};

DecryptSymmetricBytesRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptSymmetricBytesRequest._readField, {message: null, passphrase: "", options: null}, end);
};
DecryptSymmetricBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.passphrase = pbf.readString();
    else if (tag === 5) obj.options = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DecryptSymmetricBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.passphrase) pbf.writeStringField(3, obj.passphrase);
    if (obj.options) pbf.writeMessage(5, KeyOptions.write, obj.options);
};

// GenerateRequest ========================================

var GenerateRequest = self.GenerateRequest = {};

GenerateRequest.read = function (pbf, end) {
    return pbf.readFields(GenerateRequest._readField, {options: null}, end);
};
GenerateRequest._readField = function (tag, obj, pbf) {
    if (tag === 5) obj.options = Options.read(pbf, pbf.readVarint() + pbf.pos);
};
GenerateRequest.write = function (obj, pbf) {
    if (obj.options) pbf.writeMessage(5, Options.write, obj.options);
};

// KeyOptions ========================================

var KeyOptions = self.KeyOptions = {};

KeyOptions.read = function (pbf, end) {
    return pbf.readFields(KeyOptions._readField, {hash: 0, cipher: 0, compression: 0, compressionLevel: 0, rsaBits: 0}, end);
};
KeyOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.hash = pbf.readVarint();
    else if (tag === 3) obj.cipher = pbf.readVarint();
    else if (tag === 5) obj.compression = pbf.readVarint();
    else if (tag === 7) obj.compressionLevel = pbf.readVarint(true);
    else if (tag === 9) obj.rsaBits = pbf.readVarint(true);
};
KeyOptions.write = function (obj, pbf) {
    if (obj.hash) pbf.writeVarintField(1, obj.hash);
    if (obj.cipher) pbf.writeVarintField(3, obj.cipher);
    if (obj.compression) pbf.writeVarintField(5, obj.compression);
    if (obj.compressionLevel) pbf.writeVarintField(7, obj.compressionLevel);
    if (obj.rsaBits) pbf.writeVarintField(9, obj.rsaBits);
};

// Options ========================================

var Options = self.Options = {};

Options.read = function (pbf, end) {
    return pbf.readFields(Options._readField, {name: "", comment: "", email: "", passphrase: "", keyOptions: null}, end);
};
Options._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.comment = pbf.readString();
    else if (tag === 5) obj.email = pbf.readString();
    else if (tag === 7) obj.passphrase = pbf.readString();
    else if (tag === 9) obj.keyOptions = KeyOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
Options.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.comment) pbf.writeStringField(3, obj.comment);
    if (obj.email) pbf.writeStringField(5, obj.email);
    if (obj.passphrase) pbf.writeStringField(7, obj.passphrase);
    if (obj.keyOptions) pbf.writeMessage(9, KeyOptions.write, obj.keyOptions);
};

// FileHints ========================================

var FileHints = self.FileHints = {};

FileHints.read = function (pbf, end) {
    return pbf.readFields(FileHints._readField, {isBinary: false, fileName: "", modTime: ""}, end);
};
FileHints._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.isBinary = pbf.readBoolean();
    else if (tag === 3) obj.fileName = pbf.readString();
    else if (tag === 5) obj.modTime = pbf.readString();
};
FileHints.write = function (obj, pbf) {
    if (obj.isBinary) pbf.writeBooleanField(1, obj.isBinary);
    if (obj.fileName) pbf.writeStringField(3, obj.fileName);
    if (obj.modTime) pbf.writeStringField(5, obj.modTime);
};

// Entity ========================================

var Entity = self.Entity = {};

Entity.read = function (pbf, end) {
    return pbf.readFields(Entity._readField, {publicKey: "", privateKey: "", passphrase: ""}, end);
};
Entity._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.publicKey = pbf.readString();
    else if (tag === 3) obj.privateKey = pbf.readString();
    else if (tag === 5) obj.passphrase = pbf.readString();
};
Entity.write = function (obj, pbf) {
    if (obj.publicKey) pbf.writeStringField(1, obj.publicKey);
    if (obj.privateKey) pbf.writeStringField(3, obj.privateKey);
    if (obj.passphrase) pbf.writeStringField(5, obj.passphrase);
};

// StringResponse ========================================

var StringResponse = self.StringResponse = {};

StringResponse.read = function (pbf, end) {
    return pbf.readFields(StringResponse._readField, {output: "", error: ""}, end);
};
StringResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = pbf.readString();
    else if (tag === 3) obj.error = pbf.readString();
};
StringResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeStringField(1, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// BytesResponse ========================================

var BytesResponse = self.BytesResponse = {};

BytesResponse.read = function (pbf, end) {
    return pbf.readFields(BytesResponse._readField, {output: null, error: ""}, end);
};
BytesResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = pbf.readBytes();
    else if (tag === 3) obj.error = pbf.readString();
};
BytesResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeBytesField(1, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// BoolResponse ========================================

var BoolResponse = self.BoolResponse = {};

BoolResponse.read = function (pbf, end) {
    return pbf.readFields(BoolResponse._readField, {output: false, error: ""}, end);
};
BoolResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = pbf.readBoolean();
    else if (tag === 3) obj.error = pbf.readString();
};
BoolResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeBooleanField(1, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// KeyPairResponse ========================================

var KeyPairResponse = self.KeyPairResponse = {};

KeyPairResponse.read = function (pbf, end) {
    return pbf.readFields(KeyPairResponse._readField, {output: null, error: ""}, end);
};
KeyPairResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = KeyPair.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.error = pbf.readString();
};
KeyPairResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeMessage(1, KeyPair.write, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// KeyPair ========================================

var KeyPair = self.KeyPair = {};

KeyPair.read = function (pbf, end) {
    return pbf.readFields(KeyPair._readField, {publicKey: "", privateKey: ""}, end);
};
KeyPair._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.publicKey = pbf.readString();
    else if (tag === 3) obj.privateKey = pbf.readString();
};
KeyPair.write = function (obj, pbf) {
    if (obj.publicKey) pbf.writeStringField(1, obj.publicKey);
    if (obj.privateKey) pbf.writeStringField(3, obj.privateKey);
};

// PublicKeyMetadata ========================================

var PublicKeyMetadata = self.PublicKeyMetadata = {};

PublicKeyMetadata.read = function (pbf, end) {
    return pbf.readFields(PublicKeyMetadata._readField, {keyID: "", keyIDShort: "", creationTime: "", fingerprint: "", keyIDNumeric: "", isSubKey: false}, end);
};
PublicKeyMetadata._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.keyID = pbf.readString();
    else if (tag === 3) obj.keyIDShort = pbf.readString();
    else if (tag === 5) obj.creationTime = pbf.readString();
    else if (tag === 7) obj.fingerprint = pbf.readString();
    else if (tag === 9) obj.keyIDNumeric = pbf.readString();
    else if (tag === 11) obj.isSubKey = pbf.readBoolean();
};
PublicKeyMetadata.write = function (obj, pbf) {
    if (obj.keyID) pbf.writeStringField(1, obj.keyID);
    if (obj.keyIDShort) pbf.writeStringField(3, obj.keyIDShort);
    if (obj.creationTime) pbf.writeStringField(5, obj.creationTime);
    if (obj.fingerprint) pbf.writeStringField(7, obj.fingerprint);
    if (obj.keyIDNumeric) pbf.writeStringField(9, obj.keyIDNumeric);
    if (obj.isSubKey) pbf.writeBooleanField(11, obj.isSubKey);
};

// PrivateKeyMetadata ========================================

var PrivateKeyMetadata = self.PrivateKeyMetadata = {};

PrivateKeyMetadata.read = function (pbf, end) {
    return pbf.readFields(PrivateKeyMetadata._readField, {keyID: "", keyIDShort: "", creationTime: "", fingerprint: "", keyIDNumeric: "", isSubKey: false, encrypted: false}, end);
};
PrivateKeyMetadata._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.keyID = pbf.readString();
    else if (tag === 3) obj.keyIDShort = pbf.readString();
    else if (tag === 5) obj.creationTime = pbf.readString();
    else if (tag === 7) obj.fingerprint = pbf.readString();
    else if (tag === 9) obj.keyIDNumeric = pbf.readString();
    else if (tag === 11) obj.isSubKey = pbf.readBoolean();
    else if (tag === 13) obj.encrypted = pbf.readBoolean();
};
PrivateKeyMetadata.write = function (obj, pbf) {
    if (obj.keyID) pbf.writeStringField(1, obj.keyID);
    if (obj.keyIDShort) pbf.writeStringField(3, obj.keyIDShort);
    if (obj.creationTime) pbf.writeStringField(5, obj.creationTime);
    if (obj.fingerprint) pbf.writeStringField(7, obj.fingerprint);
    if (obj.keyIDNumeric) pbf.writeStringField(9, obj.keyIDNumeric);
    if (obj.isSubKey) pbf.writeBooleanField(11, obj.isSubKey);
    if (obj.encrypted) pbf.writeBooleanField(13, obj.encrypted);
};
