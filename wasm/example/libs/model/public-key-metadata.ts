// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PublicKeyMetadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PublicKeyMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPublicKeyMetadata(bb:flatbuffers.ByteBuffer, obj?:PublicKeyMetadata):PublicKeyMetadata {
  return (obj || new PublicKeyMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPublicKeyMetadata(bb:flatbuffers.ByteBuffer, obj?:PublicKeyMetadata):PublicKeyMetadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PublicKeyMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

keyID():string|null
keyID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
keyID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

keyIDShort():string|null
keyIDShort(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
keyIDShort(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

creationTime():string|null
creationTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fingerprint():string|null
fingerprint(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fingerprint(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

keyIDNumeric():string|null
keyIDNumeric(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
keyIDNumeric(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isSubKey():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_isSubKey(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

static startPublicKeyMetadata(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addKeyID(builder:flatbuffers.Builder, keyIDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyIDOffset, 0);
}

static addKeyIDShort(builder:flatbuffers.Builder, keyIDShortOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, keyIDShortOffset, 0);
}

static addCreationTime(builder:flatbuffers.Builder, creationTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, creationTimeOffset, 0);
}

static addFingerprint(builder:flatbuffers.Builder, fingerprintOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fingerprintOffset, 0);
}

static addKeyIDNumeric(builder:flatbuffers.Builder, keyIDNumericOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, keyIDNumericOffset, 0);
}

static addIsSubKey(builder:flatbuffers.Builder, isSubKey:boolean) {
  builder.addFieldInt8(5, +isSubKey, +false);
}

static endPublicKeyMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPublicKeyMetadata(builder:flatbuffers.Builder, keyIDOffset:flatbuffers.Offset, keyIDShortOffset:flatbuffers.Offset, creationTimeOffset:flatbuffers.Offset, fingerprintOffset:flatbuffers.Offset, keyIDNumericOffset:flatbuffers.Offset, isSubKey:boolean):flatbuffers.Offset {
  PublicKeyMetadata.startPublicKeyMetadata(builder);
  PublicKeyMetadata.addKeyID(builder, keyIDOffset);
  PublicKeyMetadata.addKeyIDShort(builder, keyIDShortOffset);
  PublicKeyMetadata.addCreationTime(builder, creationTimeOffset);
  PublicKeyMetadata.addFingerprint(builder, fingerprintOffset);
  PublicKeyMetadata.addKeyIDNumeric(builder, keyIDNumericOffset);
  PublicKeyMetadata.addIsSubKey(builder, isSubKey);
  return PublicKeyMetadata.endPublicKeyMetadata(builder);
}
}
